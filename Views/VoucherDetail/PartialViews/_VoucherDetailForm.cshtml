@using VoucherCapture.ViewModel
@model List<VoucherDetail_ViewModel>

@{
    // Separar artículos normales de consignación
    var normalItems = new List<VoucherDetail_ViewModel>();
    var consignmentItems = new List<VoucherDetail_ViewModel>();

    foreach (var item in Model)
    {
        // Verificar si es consignación (si tiene almacén con ID 999)
        bool isConsignment = item.Storages != null && item.Storages.Any(s => s.IdStorage == 999);

        if (isConsignment)
            consignmentItems.Add(item);
        else
            normalItems.Add(item);
    }
}

<div class="row align-middle">
    <div class="col">
        <div class="row">
            <div class="col-auto d-flex">
                <label class="form-label">Concepto: </label>
            </div>
            <div class="col">
                <input class="form-control" type="text" list="concepts" id="txtConcept" />
                <datalist id="concepts"></datalist>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row">
            <div class="col-auto d-flex"><label class="form-label">Comentario: </label></div>
            <div class="col"><textarea class="form-control" id="txtComment" placeholder="Opcional">Folio:@ViewBag.VoucherNumber </textarea></div>
        </div>
    </div>
</div>
<br />

@if (normalItems.Any())
{
    <h5><i class="bi bi-box"></i> Artículos Normales</h5>
    <table class="table table-secondary table-sm table-bordered table-hover table-striped text-center align-middle">
        <thead>
            <tr>
                <th rowspan="2" width="10%">Insumo</th>
                <th rowspan="2" width="40%">Descripción</th>
                <th rowspan="2" width="6%">Cantidad Solicitada</th>
                <th colspan="6" width="39%">Almacén</th>
                <th rowspan="2" width="5%">T. U.</th>
            </tr>
            <tr>
                <th colspan="2">Gral</th>
                <th colspan="2">Imp</th>
                <th colspan="2">M.P</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in normalItems)
            {
                <tr name="supplies" data-id="@item.IdVoucherDetail" data-qtyReq="@item.QtyRequested">
                    <td>@item.MicrosipKey</td>
                    <td>@item.Supply</td>
                    <td>@item.QtyRequested</td>

                    @{
                        // Buscar almacenes específicos por ID
                        var almacenGral = item.Storages?.FirstOrDefault(s => s.IdStorage == 19);
                        var almacenImp = item.Storages?.FirstOrDefault(s => s.IdStorage == 172357);
                        var almacenMP = item.Storages?.FirstOrDefault(s => s.IdStorage == 172356);
                    }

                    <!-- Almacén General -->
                    <td>
                        @if (almacenGral != null && almacenGral.QtyTotal > 0)
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="19" data-qtyTotal="@almacenGral.QtyTotal" />
                        }
                        else
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="19" data-qtyTotal="0" disabled />
                        }
                    </td>
                    <td>@(almacenGral?.QtyTotal ?? 0)</td>

                    <!-- Almacén Importación -->
                    <td>
                        @if (almacenImp != null && almacenImp.QtyTotal > 0)
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="172357" data-qtyTotal="@almacenImp.QtyTotal" />
                        }
                        else
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="172357" data-qtyTotal="0" disabled />
                        }
                    </td>
                    <td>@(almacenImp?.QtyTotal ?? 0)</td>

                    <!-- Almacén Materia Prima -->
                    <td>
                        @if (almacenMP != null && almacenMP.QtyTotal > 0)
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="172356" data-qtyTotal="@almacenMP.QtyTotal" />
                        }
                        else
                        {
                            <input class="form-control" type="number" name="txtQtyAS" step="0.001"
                                   data-storage="172356" data-qtyTotal="0" disabled />
                        }
                    </td>
                    <td>@(almacenMP?.QtyTotal ?? 0)</td>

                    <td>@item.UnitType</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (consignmentItems.Any())
{
    <br />
    <h5><i class="bi bi-box-seam"></i> Artículos de Consignación</h5>
    <table class="table table-warning table-sm table-bordered table-hover table-striped text-center align-middle">
        <thead>
            <tr>
                <th width="15%">Insumo</th>
                <th width="45%">Descripción</th>
                <th width="10%">Cantidad Solicitada</th>
                <th width="10%">Stock Disponible</th>
                <th width="10%">Cantidad Autorizada</th>
                <th width="10%">T. U.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in consignmentItems)
            {
                var consignmentStorage = item.Storages?.FirstOrDefault(s => s.IdStorage == 999);
                decimal availableStock = consignmentStorage != null ? (decimal)consignmentStorage.QtyTotal : 0;

                <tr name="consignmentSupplies" data-id="@item.IdVoucherDetail" data-qtyReq="@item.QtyRequested">
                    <td>@item.MicrosipKey</td>
                    <td>@item.Supply</td>
                    <td>@item.QtyRequested</td>
                    <td>
                        <span class="badge @(availableStock > 0 ? "bg-success" : "bg-danger")">
                            @availableStock.ToString("N2")
                        </span>
                    </td>
                    <td>
                        <input class="form-control" type="number" name="txtQtyConsignment"
                               step="0.001" min="0" max="@availableStock"
                               data-storage="999" data-qtyTotal="@availableStock"
                               @(availableStock == 0 ? "disabled" : "") />
                    </td>
                    <td>@item.UnitType</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button type="button" class="btn btn-danger" style="margin-right:auto;" onclick="Authorize(3)"><i class="bi bi-x-lg"></i> Rechazar</button>
    <button type="button" class="btn btn-success" onclick="Authorize(1)"><i class="bi bi-check2"></i> Aceptar</button>
</div>

<script>
    GetConcepts();

    function GetConcepts() {
        $.ajax({
            url: '/Storage/ListConcepts',
            method: "GET",
            success: function (result) {
                $("#concepts").empty();
                var s = '';
                for (var i = 0; i < result.length; i++) {
                    s += '<option data-id="' + result[i].idConcept + '" value="' + result[i].description + '"></option>';
                }
                $("#concepts").append(s);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Status: " + textStatus); alert("Error: " + errorThrown);
                console.log(error);
            }
        });
    }

    function Authorize(status) {
        var msg = 'rechazar';
        if (status == 1) {
            msg = 'aprobar';
        }
        var result = confirm("¿Realmente quiere " + msg + " esta solicitud?");
        if (result) {
            var data = [];
            var hasError = false;

            // Procesar artículos normales
            var rowsTbl = document.getElementsByName('supplies');
            for (var i = 0; i < rowsTbl.length; i++) {
                var inputs = rowsTbl[i].querySelectorAll('input[name="txtQtyAS"]');
                var rowData = {
                    idVoucherDetail: rowsTbl[i].getAttribute('data-id'),
                    storages: []
                };
                var sum = 0;
                var qtyReq = parseFloat(rowsTbl[i].getAttribute('data-qtyReq'));

                for (var j = 0; j < inputs.length; j++) {
                    var inputValue = parseFloat(inputs[j].value) || 0;

                    if (inputValue < 0) {
                        hasError = true;
                        alert('Se debe de aceptar una cantidad mayor o igual a 0.');
                        inputs[j].focus();
                        break;
                    }

                    var qtyTotal = parseFloat(inputs[j].getAttribute('data-qtyTotal'));
                    if (inputValue > qtyTotal) {
                        hasError = true;
                        alert('No se puede aceptar una cantidad mayor a la existente.');
                        inputs[j].focus();
                        break;
                    }

                    rowData.storages.push({
                        qtyTotal: inputValue,
                        idStorage: inputs[j].getAttribute('data-storage')
                    });
                    sum += inputValue;
                }

                if (hasError) break;

                if (sum <= qtyReq) {
                    data.push(rowData);
                } else {
                    hasError = true;
                    alert('No se puede aceptar una cantidad mayor a la requerida. Fila: ' + (i + 1));
                    break;
                }
            }

            // Procesar artículos de consignación
            if (!hasError) {
                var consignmentRows = document.getElementsByName('consignmentSupplies');
                for (var i = 0; i < consignmentRows.length; i++) {
                    var input = consignmentRows[i].querySelector('input[name="txtQtyConsignment"]');
                    var qtyReq = parseFloat(consignmentRows[i].getAttribute('data-qtyReq'));
                    var qtyTotal = parseFloat(input.getAttribute('data-qtyTotal'));
                    var inputValue = parseFloat(input.value) || 0;

                    if (inputValue < 0) {
                        hasError = true;
                        alert('Se debe de aceptar una cantidad mayor o igual a 0.');
                        input.focus();
                        break;
                    }

                    if (inputValue > qtyTotal) {
                        hasError = true;
                        alert('No se puede aceptar una cantidad mayor a la existente en consignación.');
                        input.focus();
                        break;
                    }

                    if (inputValue > qtyReq) {
                        hasError = true;
                        alert('No se puede aceptar una cantidad mayor a la requerida.');
                        input.focus();
                        break;
                    }

                    data.push({
                        idVoucherDetail: consignmentRows[i].getAttribute('data-id'),
                        storages: [{
                            qtyTotal: inputValue,
                            idStorage: 999 // ID para consignación
                        }]
                    });
                }
            }

            if (!hasError) {
                var comment = $('#txtComment').val();
                var inputElement = document.getElementById('txtConcept');
                var datalistElement = document.getElementById('concepts');
                var selectedValue = inputElement.value;
                var selectedOption = Array.from(datalistElement.options).find(option => option.value === selectedValue);

                if (!selectedOption) {
                    inputElement.value = null;
                    alert('Se tiene que seleccionar un concepto.');
                } else {
                    var idConcept = selectedOption.getAttribute('data-id');
                    $.ajax({
                        url: '/Authorize',
                        method: "post",
                        data: { status: status, idVoucher: @ViewBag.IdVoucher, lsvVDM: data, comment: comment, idConcept: idConcept },
                        success: function (data) {
                            window.location.href = data.redirectUrl;
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            console.log("Status: " + textStatus);
                            console.log("Error: " + errorThrown);
                        }
                    });
                }
            }
        }
    }
</script>